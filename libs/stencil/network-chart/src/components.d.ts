/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { NetworkChartData } from "./components/network-chart/network-chart";
import { SimulationNodeDatum } from "d3";
export namespace Components {
    interface GramenerNetworkChart {
        /**
          * If true, don't allow nodes to overlap. If set to a number, provide a padding between nodes. Default: false
         */
        "collide": number;
        /**
          * The data to display in the chart.
         */
        "data": NetworkChartData;
        /**
          * Default: pin
         */
        "dragAction": string;
        /**
          * Chart height in pixels. Default: 500
         */
        "height": number;
        /**
          * Show labels? `labels="false"` hides all labels. Default: true
         */
        "label": boolean;
        /**
          * `hanging` for top aligned, `alphabetic` for bottom-aligned,  `middle` for centered. Default: middle
         */
        "labelDominantBaseline": string;
        /**
          * Shift label right in pixels. -ve values to shift left. Default: 0
         */
        "labelDx": number | ((d: SimulationNodeDatum) => number);
        /**
          * Shift label down in pixels. -ve values to shift up. Default: 0
         */
        "labelDy": number | ((d: SimulationNodeDatum) => number);
        /**
          * Label font color. Default: black
         */
        "labelFill": string;
        /**
          * Label font name, e.g. `Roboto`. Default: sans-serif
         */
        "labelFontFamily": string;
        /**
          * Label font size in pixels. Default: 12
         */
        "labelFontSize": number;
        /**
          * Label font weight, e.g. "bold" or "". Default: bold
         */
        "labelFontWeight": string;
        /**
          * Text to show in label. Default: None
         */
        "labelText": string | ((d: SimulationNodeDatum) => string);
        /**
          * `start` for left aligned, `end` for right-aligned, `middle` for centered. Default: middle
         */
        "labelTextAnchor": string;
        /**
          * Show links? `links="false"` hides all links. Default: true
         */
        "link": boolean;
        /**
          * Default distance between nodes. Default: 30
         */
        "linkDistance": number;
        /**
          * TODO: document this. Default: None
         */
        "linkId": string;
        /**
          * Use 0.0 for transparent links, 1.0 for opaque links. Default: 0.6
         */
        "linkOpacity": number;
        /**
          * Line color of the links. Default: #999
         */
        "linkStroke": string;
        /**
          * Thickness of the links in pixels. Default: 1
         */
        "linkStrokeWidth": number;
        /**
          * Show nodes? `node="false"` hides all nodes. Default: true
         */
        "node": boolean;
        /**
          * How strongly nodes push each other. -ve values make nodes pull each other. Default: +30
         */
        "nodeCharge": number;
        /**
          * Color of the node circles. Default: red
         */
        "nodeFill": string | ((node: SimulationNodeDatum) => string);
        /**
          * Use 0.0 for transparent nodes, 1.0 for opaque nodes. Default: 1
         */
        "nodeOpacity": number;
        /**
          * Radius of node circles in pixels. Default: 5
         */
        "nodeSize": (node: SimulationNodeDatum) => number;
        /**
          * Outline color of the node circles. Default: #fff
         */
        "nodeStroke": string | ((node: SimulationNodeDatum) => string);
        /**
          * Thickness of the node circles in pixels. Default: 1
         */
        "nodeStrokeWidth": number;
        /**
          * The type of chart
         */
        "type": string;
        /**
          * Chart width in pixels. Default: 500
         */
        "width": number;
    }
}
declare global {
    interface HTMLGramenerNetworkChartElement extends Components.GramenerNetworkChart, HTMLStencilElement {
    }
    var HTMLGramenerNetworkChartElement: {
        prototype: HTMLGramenerNetworkChartElement;
        new (): HTMLGramenerNetworkChartElement;
    };
    interface HTMLElementTagNameMap {
        "gramener-network-chart": HTMLGramenerNetworkChartElement;
    }
}
declare namespace LocalJSX {
    interface GramenerNetworkChart {
        /**
          * If true, don't allow nodes to overlap. If set to a number, provide a padding between nodes. Default: false
         */
        "collide"?: number;
        /**
          * The data to display in the chart.
         */
        "data"?: NetworkChartData;
        /**
          * Default: pin
         */
        "dragAction"?: string;
        /**
          * Chart height in pixels. Default: 500
         */
        "height"?: number;
        /**
          * Show labels? `labels="false"` hides all labels. Default: true
         */
        "label"?: boolean;
        /**
          * `hanging` for top aligned, `alphabetic` for bottom-aligned,  `middle` for centered. Default: middle
         */
        "labelDominantBaseline"?: string;
        /**
          * Shift label right in pixels. -ve values to shift left. Default: 0
         */
        "labelDx"?: number | ((d: SimulationNodeDatum) => number);
        /**
          * Shift label down in pixels. -ve values to shift up. Default: 0
         */
        "labelDy"?: number | ((d: SimulationNodeDatum) => number);
        /**
          * Label font color. Default: black
         */
        "labelFill"?: string;
        /**
          * Label font name, e.g. `Roboto`. Default: sans-serif
         */
        "labelFontFamily"?: string;
        /**
          * Label font size in pixels. Default: 12
         */
        "labelFontSize"?: number;
        /**
          * Label font weight, e.g. "bold" or "". Default: bold
         */
        "labelFontWeight"?: string;
        /**
          * Text to show in label. Default: None
         */
        "labelText"?: string | ((d: SimulationNodeDatum) => string);
        /**
          * `start` for left aligned, `end` for right-aligned, `middle` for centered. Default: middle
         */
        "labelTextAnchor"?: string;
        /**
          * Show links? `links="false"` hides all links. Default: true
         */
        "link"?: boolean;
        /**
          * Default distance between nodes. Default: 30
         */
        "linkDistance"?: number;
        /**
          * TODO: document this. Default: None
         */
        "linkId"?: string;
        /**
          * Use 0.0 for transparent links, 1.0 for opaque links. Default: 0.6
         */
        "linkOpacity"?: number;
        /**
          * Line color of the links. Default: #999
         */
        "linkStroke"?: string;
        /**
          * Thickness of the links in pixels. Default: 1
         */
        "linkStrokeWidth"?: number;
        /**
          * Show nodes? `node="false"` hides all nodes. Default: true
         */
        "node"?: boolean;
        /**
          * How strongly nodes push each other. -ve values make nodes pull each other. Default: +30
         */
        "nodeCharge"?: number;
        /**
          * Color of the node circles. Default: red
         */
        "nodeFill"?: string | ((node: SimulationNodeDatum) => string);
        /**
          * Use 0.0 for transparent nodes, 1.0 for opaque nodes. Default: 1
         */
        "nodeOpacity"?: number;
        /**
          * Radius of node circles in pixels. Default: 5
         */
        "nodeSize"?: (node: SimulationNodeDatum) => number;
        /**
          * Outline color of the node circles. Default: #fff
         */
        "nodeStroke"?: string | ((node: SimulationNodeDatum) => string);
        /**
          * Thickness of the node circles in pixels. Default: 1
         */
        "nodeStrokeWidth"?: number;
        /**
          * The type of chart
         */
        "type"?: string;
        /**
          * Chart width in pixels. Default: 500
         */
        "width"?: number;
    }
    interface IntrinsicElements {
        "gramener-network-chart": GramenerNetworkChart;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gramener-network-chart": LocalJSX.GramenerNetworkChart & JSXBase.HTMLAttributes<HTMLGramenerNetworkChartElement>;
        }
    }
}
